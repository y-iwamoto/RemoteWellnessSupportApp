name: pr-agent

on:
  pull_request:
    types: [opened, reopened, synchronize]
  issue_comment:
    types: [created, edited]

permissions:
  pull-requests: write
  issues: write

jobs:
  pr_agent:
    runs-on: ubuntu-latest
    name: Run PR Agent
    if: ${{ github.event.sender.type != 'Bot' }}
    steps:
      - id: pr-agent
        uses: Codium-ai/pr-agent@main
        env:
          OPENAI_KEY: ${{ secrets.OPENAI_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          github_action.auto_describe: true
          github_action.auto_review:   true
          github_action.auto_improve:  true
          # レビュー総評コメントである "PR Feedback" への追加プロンプト 
          PR_REVIEWER.EXTRA_INSTRUCTIONS: >- 
            日本語で回答してください。 
            以下の原則に従ってコメントしてください。
            何回も重複して書かれている処理がないか？
            今後の拡張性を考えた作りになっているか？使い回しが効かないような引数や設計になっていないか？
            クラスごとの責任範囲が明確になっているか？決められたフレームワークに沿ってかかれているか？
            既存クラスでよく使うような関数などはプロトコルに切り出して綺麗にかけるようにならないか？
            クラスに役割がわからないような名前をつけていないか？
            コーディング規約に沿ってコードが書かれているか？
            変数や関数のアクセス修飾子が適切につけられているか？ 
            何度も使っているのに定数化していないような文字列や数字はないか？
            if文などのネストが深くなりすぎていないか？早期return出来ないか？guard文がかけないか？
            xxな状態、などの条件をswitch文で分岐している時に、xxしている状態などをenumなどで表せないか？
            強制アンラップしている箇所はないか？guard文などを使って綺麗に書けないか？
            不要な「import」が存在していないか？
            型推論をさせているか
            protocol/delegateをextensionにリファクタしたか
            誤字があるか
            高階関数を活用しているか（map, flatMap, reduce, filterなど）
            APIがdeprecatedか
            名前get/setついてないか
            名前だけで戻り値が分かるようにする
            BooLでis使う時には考える。意味がおかしくなるのが多いのでhasやshouldなど場合に応じて適宜する
            変数名で何を判定しているのかを書く
            メソッドのラベルは英語の前置詞としてふさわしいものになっているか
            メソッド名自体に与えるべき引数が表現されている場合は、ラベルを省略する 
            クロージャの中で何行にも渡って`$0``$1`を書く場合は`$0``$1`を使わずに引数には名前をつけておく
            typo、インデントが正しいか
            〜Array,Listという名前は使わない。複数形は〜s。
            配列操作は.mapやfilter。FRPを意識する。 ループはforinではなくてforEachを使った方が統一感が出て読みやすい（もちろん用途によるが）。
            略記は使わない。（imgViewやVcはなし。imageViewやviewControllerと書く）
            2行改行は使わない。（意図があればよし）逆に1行改行は見やすくするためよく使う。
            if文で条件複数の場合で1行が長くなるようだったら改行入れて見やすく。
            修飾子は基本privateつける。defaultはinternal。
            classには基本finalつける。
            読み手に分かりやすいコメントを。素材差し替えするなど修正する場合→TODO: で、不具合ある場合は、FIXME: ,理由や実装経緯はNote:、でコメント追加。
            型になりうるものはアッパーキャメルケース。ならないものはローワーキャメルケース
            ネストが深い
            再代入しない変数は`var`ではなく`let`にする
          # プルリクの要約 "PR Descrition" に関する追加プロンプト
          PR_DESCRIPTION.EXTRA_INSTRUCTIONS: >- 
            日本語で回答してください。
            タイトルは feat: 、chore: 、test: 、fix: 、ci: 、docs: などの
            commitlint パターンの接頭辞を含む必要があります。
          # /improve で呼び出す修正コードの "Suggestion" 時の追加プロンプト
          PR_CODE_SUGGESTIONS.EXTRA_INSTRUCTIONS: >-
            日本語で回答してください。
            以下の原則に従ってコメントしてください。
            何回も重複して書かれている処理がないか？
            今後の拡張性を考えた作りになっているか？使い回しが効かないような引数や設計になっていないか？
            クラスごとの責任範囲が明確になっているか？決められたフレームワークに沿ってかかれているか？
            既存クラスでよく使うような関数などはプロトコルに切り出して綺麗にかけるようにならないか？
            クラスに役割がわからないような名前をつけていないか？
            コーディング規約に沿ってコードが書かれているか？
            変数や関数のアクセス修飾子が適切につけられているか？ 
            何度も使っているのに定数化していないような文字列や数字はないか？
            if文などのネストが深くなりすぎていないか？早期return出来ないか？guard文がかけないか？
            xxな状態、などの条件をswitch文で分岐している時に、xxしている状態などをenumなどで表せないか？
            強制アンラップしている箇所はないか？guard文などを使って綺麗に書けないか？
            不要な「import」が存在していないか？
            型推論をさせているか
            protocol/delegateをextensionにリファクタしたか
            誤字があるか
            高階関数を活用しているか（map, flatMap, reduce, filterなど）
            APIがdeprecatedか
            名前get/setついてないか
            名前だけで戻り値が分かるようにする
            BooLでis使う時には考える。意味がおかしくなるのが多いのでhasやshouldなど場合に応じて適宜する
            変数名で何を判定しているのかを書く
            メソッドのラベルは英語の前置詞としてふさわしいものになっているか
            メソッド名自体に与えるべき引数が表現されている場合は、ラベルを省略する 
            クロージャの中で何行にも渡って`$0``$1`を書く場合は`$0``$1`を使わずに引数には名前をつけておく
            typo、インデントが正しいか
            〜Array,Listという名前は使わない。複数形は〜s。
            配列操作は.mapやfilter。FRPを意識する。 ループはforinではなくてforEachを使った方が統一感が出て読みやすい（もちろん用途によるが）。
            略記は使わない。（imgViewやVcはなし。imageViewやviewControllerと書く）
            2行改行は使わない。（意図があればよし）逆に1行改行は見やすくするためよく使う。
            if文で条件複数の場合で1行が長くなるようだったら改行入れて見やすく。
            修飾子は基本privateつける。defaultはinternal。
            classには基本finalつける。
            読み手に分かりやすいコメントを。素材差し替えするなど修正する場合→TODO: で、不具合ある場合は、FIXME: ,理由や実装経緯はNote:、でコメント追加。
            型になりうるものはアッパーキャメルケース。ならないものはローワーキャメルケース
            ネストが深い
            再代入しない変数は`var`ではなく`let`にする
          # /improve コメントの後に提案されるコードの数。
          PR_CODE_SUGGESTIONS.NUM_CODE_SUGGESTIONS: 5