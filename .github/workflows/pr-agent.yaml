name: pr-agent

on:
  pull_request:
    types: [opened, reopened, synchronize]
  issue_comment:
    types: [created, edited]

permissions:
  pull-requests: write
  issues: write

jobs:
  pr_agent:
    runs-on: ubuntu-latest
    name: Run PR Agent
    if: ${{ github.event.sender.type != 'Bot' }}
    steps:
      - id: pr-agent
        uses: Codium-ai/pr-agent@main
        env:
          OPENAI_KEY: ${{ secrets.OPENAI_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          github_action.auto_describe: true
          github_action.auto_review:   true
          github_action.auto_improve:  true
          # レビュー総評コメントである "PR Feedback" への追加プロンプト 
          PR_REVIEWER.EXTRA_INSTRUCTIONS: >- 
            日本語で回答してください。 
            以下の原則に従ってコメントしてください。
            コーディングスタイルと規約
            - コーディング規約に沿っているか？
            - 誤字、インデントが正しいか？
            - 不要な「import」が存在していないか？
            - 型推論を適切に使用しているか？
            - 英文法の誤りがないか？
            命名規則
            - クラス、変数、関数の名前が役割を明確にしているか？
            - 名前から戻り値が分かるようになっているか？
            - 配列名は複数形にしているか、不適切な略記を使用していないか？
            - SwiftUIでは、ビューの構造体や変数の命名がさらに重要になります。UIコンポーネントの役割や内容が一目で理解できるような命名ができているか？
            アーキテクチャと設計
            - クラスごとの責任範囲が明確か？
            - 拡張性を考慮した設計になっているか？
            - SOLID原則に反していないか？
            - 密結合や低凝集を避けているか？
            - 再利用可能なコンポーネントを作成しているか？
            コーディングプラクティス
            - 重複したコードがないか？
            - 適切なアクセス修飾子を使用しているか？
            - 定数化できる文字列や数字を適切に扱っているか？
            - 早期リターンやガード文を活用しているか？
            - 高階関数（map, flatMap, reduce, filterなど）を活用しているか？
            - enumやswitch文を使用して状態管理をしているか？
            - 強制アンラップの使用を避けているか？
            コード最適化
            - ネストが深くなり過ぎていないか？
            - 不要な再代入を避けletを使用しているか？
            - 関数やクロージャ内での$0, $1の使用を適切にしているか？
            コメントとドキュメント
            - 読み手に分かりやすいコメントをしているか？
            - 修正や不具合、実装経緯について適切にコメントしているか？
            SwiftUIとiOS/watchOS特有の要素
            - ビューの再利用性とコンポーネント化: SwiftUIでは、ビューの再利用性が重要です。共通のUI部品はカスタムビューとして定義し、複数の場所で再利用できているか？
            - 状態管理: SwiftUIの状態管理（@State, @Binding, @ObservedObject, @EnvironmentObject等の使用）が適切に行われているか、不必要な再レンダリングを引き起こさないようにしているか？
            - ビューのパフォーマンス: SwiftUIビューのレンダリングパフォーマンスに影響を与える可能性のある点（たとえば、不要な計算やビューの再構築）がないか？
            - SwiftUIの新機能の適切な活用: iOS 17やwatchOS 10で追加されたSwiftUIの新機能やAPIを適切に活用しているか、古い方法に頼っていないか？
            - アクセシビリティ: アクセシビリティを考慮したUI設計がされているか。VoiceOverや拡大表示など、ユーザーがアクセスしやすいように考慮されているか？
            プラットフォーム固有の機能
            - watchOS特有の機能: コンプリケーションのデザインやデータの提供が適切に行われているか。watchOSの小さな画面サイズや独自のユーザーインターフェースを考慮した設計がされているか。
            - プラットフォーム間の一貫性と違い: iOSとwatchOSで共通の機能を提供しつつ、それぞれのプラットフォームのユーザーインターフェースガイドラインに従って最適化されているか。
          # プルリクの要約 "PR Descrition" に関する追加プロンプト
          PR_DESCRIPTION.EXTRA_INSTRUCTIONS: >- 
            日本語で回答してください。
            タイトルは feat: 、chore: 、test: 、fix: 、ci: 、docs: などの
            commitlint パターンの接頭辞を含む必要があります。
          # /improve で呼び出す修正コードの "Suggestion" 時の追加プロンプト
          PR_CODE_SUGGESTIONS.EXTRA_INSTRUCTIONS: >-
            日本語で回答してください。
            以下の原則に従ってコメントしてください。
                        日本語で回答してください。 
            以下の原則に従ってコメントしてください。
            コーディングスタイルと規約
            - コーディング規約に沿っているか？
            - 誤字、インデントが正しいか？
            - 不要な「import」が存在していないか？
            - 型推論を適切に使用しているか？
            - 英文法の誤りがないか？
            命名規則
            - クラス、変数、関数の名前が役割を明確にしているか？
            - 名前から戻り値が分かるようになっているか？
            - 配列名は複数形にしているか、不適切な略記を使用していないか？
            - SwiftUIでは、ビューの構造体や変数の命名がさらに重要になります。UIコンポーネントの役割や内容が一目で理解できるような命名ができているか？
            アーキテクチャと設計
            - クラスごとの責任範囲が明確か？
            - 拡張性を考慮した設計になっているか？
            - SOLID原則に反していないか？
            - 密結合や低凝集を避けているか？
            - 再利用可能なコンポーネントを作成しているか？
            コーディングプラクティス
            - 重複したコードがないか？
            - 適切なアクセス修飾子を使用しているか？
            - 定数化できる文字列や数字を適切に扱っているか？
            - 早期リターンやガード文を活用しているか？
            - 高階関数（map, flatMap, reduce, filterなど）を活用しているか？
            - enumやswitch文を使用して状態管理をしているか？
            - 強制アンラップの使用を避けているか？
            コード最適化
            - ネストが深くなり過ぎていないか？
            - 不要な再代入を避けletを使用しているか？
            - 関数やクロージャ内での$0, $1の使用を適切にしているか？
            コメントとドキュメント
            - 読み手に分かりやすいコメントをしているか？
            - 修正や不具合、実装経緯について適切にコメントしているか？
            SwiftUIとiOS/watchOS特有の要素
            - ビューの再利用性とコンポーネント化: SwiftUIでは、ビューの再利用性が重要です。共通のUI部品はカスタムビューとして定義し、複数の場所で再利用できているか？
            - 状態管理: SwiftUIの状態管理（@State, @Binding, @ObservedObject, @EnvironmentObject等の使用）が適切に行われているか、不必要な再レンダリングを引き起こさないようにしているか？
            - ビューのパフォーマンス: SwiftUIビューのレンダリングパフォーマンスに影響を与える可能性のある点（たとえば、不要な計算やビューの再構築）がないか？
            - SwiftUIの新機能の適切な活用: iOS 17やwatchOS 10で追加されたSwiftUIの新機能やAPIを適切に活用しているか、古い方法に頼っていないか？
            - アクセシビリティ: アクセシビリティを考慮したUI設計がされているか。VoiceOverや拡大表示など、ユーザーがアクセスしやすいように考慮されているか？
            プラットフォーム固有の機能
            - watchOS特有の機能: コンプリケーションのデザインやデータの提供が適切に行われているか。watchOSの小さな画面サイズや独自のユーザーインターフェースを考慮した設計がされているか。
            - プラットフォーム間の一貫性と違い: iOSとwatchOSで共通の機能を提供しつつ、それぞれのプラットフォームのユーザーインターフェースガイドラインに従って最適化されているか。
          # /improve コメントの後に提案されるコードの数。
          PR_CODE_SUGGESTIONS.NUM_CODE_SUGGESTIONS: 5